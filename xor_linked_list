//memory efficient doubly linked list
#include<stdio.h>
#include<conio.h>
#include<malloc.h>


struct node
{
    int data;
    struct node *npx; //xor ptr for prev and next node
};
struct node *p;

// returns the Xor val of a and b
struct node *XOR(struct node *a , struct node *b)
{
    return (struct node *)((unsigned int )(a)^(unsigned int)(b));
}

void create(int num)
{
    struct node *temp, *r;

        temp= (struct node *)malloc(sizeof(struct node));
        temp->data=num;
        temp->npx= XOR(p,NULL);



    if(p!=NULL)
    {
        r=XOR((p)->npx,NULL);
        (p)->npx = XOR(temp,r);
    }
    p=temp;
}
void display()
{
    struct node *c=p;
    struct node *prev=NULL;
    struct node *next;
    printf("nodes of linked list are : \n");
    while(c!=NULL)
    {
        printf("%d",c->data);
        next= XOR(prev,c->npx);
        prev = c; // changing val of current node n next node
        c=next;
    }
}

int main()
{
   p=NULL;
   create(1);
   create(2);
   create(3);
   create(4);
   create(5);
   create(6);
   display();
   return(0);
}
